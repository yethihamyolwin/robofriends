{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4NAceA,G,MAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,iBACzD,6BACI,4BAAKJ,GACL,2BAAIC,OCeLI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCC9BU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAXI,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,OAAQ,oBACjBF,EAAMG,WCiBJC,E,kDAnBX,aAAe,IAAD,8BACV,gBACKC,MAAO,CACRC,UAAW,GAHL,E,8DAOIC,EAAOC,GACrBC,KAAKC,SAAU,CAACJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKT,MAAMG,a,GAhBCQ,aCiDZC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACThB,OAAQ,GACV0B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAAErB,OAAQiC,S,+BAQlB,IAAD,EACuBb,KAAKJ,MAA5BhB,EADA,EACAA,OAAQ0B,EADR,EACQA,YACTQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACrC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAEnD,OAAQrC,EAAOuC,OAGb,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQkC,OAPtB,2C,GA7BMZ,a,MCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.f57e84da.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {   //props destructing\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots_photo\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return(\n                        <Card\n                            key={i} \n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ border: '3px solid black' }}>\n            {props.children}\n        </div>\n    )\n}\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor() {\n        super()\n        this.state ={\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState ({hasError: true})\n    }\n\n    render () {\n        if(this.state.hasError) {\n            return <h1>Ooooop! That is not good!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n        robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      return response.json();\n    })\n    .then(users => {\n      this.setState({ robots: users })\n    })\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  render() {\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n      return !robots.length ? \n            <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n                <CardList robots={filteredRobots} />\n            </ErrorBoundry>           \n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}